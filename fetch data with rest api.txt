import 'package:flutter/material.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter App!!',
      theme: ThemeData(
        colorSchemeSeed: Colors.indigo,
        useMaterial3: true,
        brightness: Brightness.light,
      ),
      darkTheme: ThemeData(
        colorSchemeSeed: Colors.blue,
        useMaterial3: true,
        brightness: Brightness.dark,
      ),
      home: MyHomePage(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class MyHomePage extends StatefulWidget {
  //const MyHomePage({super.key, required this.title});

  // This widget is the home page of your application. It is stateful, meaning
  // that it has a State object (defined below) that contains fields that affect
  // how it looks.

  // This class is the configuration for the state. It holds the values (in this
  // case the title) provided by the parent (in this case the App widget) and
  // used by the build method of the State. Fields in a Widget subclass are
  // always marked "final".

  //final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  
  String username = '';
  String password = '';
  bool isLoading = false;
  String errorMessage = '';

  Future<void> _login() async {
    setState(() {
      isLoading = true;
    });


     Map<String, String> requestHeaders = {
       'Content-type': 'application/json',
       'Accept': 'application/json',
      
          'versionNo': '1.0.2',
             'deviceImei': '',
                'deviceName': '',
                   'macAddress': ''
                     
     };

    // Construct the request body
    Map<String, String> body = {
      'username': username,
      'password': password,
    
      
    };


    // Make the POST request
    try {
      final response = await http.post(
        Uri.parse('http://103.254.85.44:8004/ric/api/auth/token'),
        body: json.encode(body),
        headers: requestHeaders,
        
      );

      // Check the response status code
      if (response.statusCode == 200) {
        // Login successful
        // Handle the response data here, e.g., save user token
        
        
       setState(() {
          isLoading = false;
        });
         final jsons = jsonDecode(response.body);
    // title = jsons['title'];
    //Map<String, dynamic> data = jsonDecode(response.body);
    
     print(jsons);

        return jsonDecode(response.body);
        // Navigate to the next screen
        // 
      } else {
        // Login failed
        setState(() {
          isLoading = false;
          errorMessage = 'Login failed. Please check your credentials.';
        });
      }
    } catch (error) {
      // Error occurred during the HTTP request
      setState(() {
        isLoading = false;
        errorMessage = 'Error occurred. Please try again later.';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Login'),
      ),
      body: Padding(
        padding: EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            TextField(
              onChanged: (value) => username = value,
              decoration: InputDecoration(
                labelText: 'Username',
              ),
            ),
            TextField(
              onChanged: (value) => password = value,
              decoration: InputDecoration(
                labelText: 'Password',
              ),
              obscureText: true,
            ),
            SizedBox(height: 20),
            if (isLoading)
              CircularProgressIndicator()
            else
              ElevatedButton(
                onPressed: _login,
                child: Text('Login'),
              ),
            if (errorMessage.isNotEmpty)
              Padding(
                padding: EdgeInsets.symmetric(vertical: 10),
                child: Text(
                  errorMessage,
                  style: TextStyle(color: Colors.red),
                ),
              ),
          ],
        ),
      ),
    );
  }



  
}